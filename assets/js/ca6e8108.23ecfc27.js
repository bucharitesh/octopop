"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[6713],{660:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var t=r(9214),s=r(9744);const i={},o="Function: nanoid()",a={id:"api/functions/nanoid",title:"Function: nanoid()",description:"nanoid(chars?): string",source:"@site/docs/api/functions/nanoid.md",sourceDirName:"api/functions",slug:"/api/functions/nanoid",permalink:"/docs/api/functions/nanoid",draft:!1,unlisted:!1,editUrl:"https://github.com/bucharitesh/octopop/edit/main/website/docs/api/functions/nanoid.md",tags:[],version:"current",frontMatter:{}},c={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"Source",id:"source",level:2}];function l(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.RP)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"function-nanoid",children:"Function: nanoid()"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"nanoid"}),"(",(0,t.jsx)(e.code,{children:"chars"}),"?): ",(0,t.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Generates a random alphanumeric string using the nanoid library."}),"\n",(0,t.jsx)(e.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(e.p,{children:["\u2022 ",(0,t.jsx)(e.strong,{children:"chars?"}),": ",(0,t.jsx)(e.code,{children:"number"})]}),"\n",(0,t.jsx)(e.p,{children:"Optional. The number of characters in the generated string (default is 7)."}),"\n",(0,t.jsx)(e.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"string"})}),"\n",(0,t.jsx)(e.p,{children:"A random alphanumeric string."}),"\n",(0,t.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"// Generate a 7-character random string\nconst randomString = nanoid();\nconsole.log(randomString);\n\n// Generate a 10-character random string\nconst longerRandomString = nanoid(10);\nconsole.log(longerRandomString);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"source",children:"Source"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://github.com/bucharitesh/octopop/blob/79bf9c3/packages/utils/src/functions/nanoid.ts#L17",children:"functions/nanoid.ts:17"})})]})}function u(n={}){const{wrapper:e}={...(0,s.RP)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}},9744:(n,e,r)=>{r.d(e,{RP:()=>i});var t=r(8318);const s=t.createContext({});function i(n){const e=t.useContext(s);return t.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}}}]);